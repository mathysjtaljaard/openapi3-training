/*
 * API Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Beer;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BeersApi {
    private ApiClient localVarApiClient;

    public BeersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BeersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listBeersV1
     * @param pageNumber Given Page Number (optional, default to 0)
     * @param pageSize Given Number of Results to return per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBeersV1Call(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/listbeers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JwtAuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBeersV1ValidateBeforeCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listBeersV1Call(pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * returns a list of beers
     * @param pageNumber Given Page Number (optional, default to 0)
     * @param pageSize Given Number of Results to return per page (optional, default to 100)
     * @return List&lt;Beer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Beer> listBeersV1(Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<List<Beer>> localVarResp = listBeersV1WithHttpInfo(pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * returns a list of beers
     * @param pageNumber Given Page Number (optional, default to 0)
     * @param pageSize Given Number of Results to return per page (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Beer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Beer>> listBeersV1WithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listBeersV1ValidateBeforeCall(pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Beer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns a list of beers
     * @param pageNumber Given Page Number (optional, default to 0)
     * @param pageSize Given Number of Results to return per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBeersV1Async(Integer pageNumber, Integer pageSize, final ApiCallback<List<Beer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBeersV1ValidateBeforeCall(pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Beer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BeersBeerIdDelete
     * @param beerId Retrieve beer given beer id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BeersBeerIdDeleteCall(UUID beerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/beers/{beerId}"
            .replaceAll("\\{" + "beerId" + "\\}", localVarApiClient.escapeString(beerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JwtAuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BeersBeerIdDeleteValidateBeforeCall(UUID beerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beerId' is set
        if (beerId == null) {
            throw new ApiException("Missing the required parameter 'beerId' when calling v2BeersBeerIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v2BeersBeerIdDeleteCall(beerId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete beer, it was bad
     * @param beerId Retrieve beer given beer id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void v2BeersBeerIdDelete(UUID beerId) throws ApiException {
        v2BeersBeerIdDeleteWithHttpInfo(beerId);
    }

    /**
     * 
     * Delete beer, it was bad
     * @param beerId Retrieve beer given beer id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2BeersBeerIdDeleteWithHttpInfo(UUID beerId) throws ApiException {
        okhttp3.Call localVarCall = v2BeersBeerIdDeleteValidateBeforeCall(beerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete beer, it was bad
     * @param beerId Retrieve beer given beer id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BeersBeerIdDeleteAsync(UUID beerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BeersBeerIdDeleteValidateBeforeCall(beerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BeersBeerIdGet
     * @param beerId Retrieve beer given beer id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found beer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BeersBeerIdGetCall(UUID beerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/beers/{beerId}"
            .replaceAll("\\{" + "beerId" + "\\}", localVarApiClient.escapeString(beerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JwtAuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BeersBeerIdGetValidateBeforeCall(UUID beerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beerId' is set
        if (beerId == null) {
            throw new ApiException("Missing the required parameter 'beerId' when calling v2BeersBeerIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v2BeersBeerIdGetCall(beerId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param beerId Retrieve beer given beer id (required)
     * @return Beer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found beer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Beer v2BeersBeerIdGet(UUID beerId) throws ApiException {
        ApiResponse<Beer> localVarResp = v2BeersBeerIdGetWithHttpInfo(beerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param beerId Retrieve beer given beer id (required)
     * @return ApiResponse&lt;Beer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found beer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Beer> v2BeersBeerIdGetWithHttpInfo(UUID beerId) throws ApiException {
        okhttp3.Call localVarCall = v2BeersBeerIdGetValidateBeforeCall(beerId, null);
        Type localVarReturnType = new TypeToken<Beer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param beerId Retrieve beer given beer id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found beer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BeersBeerIdGetAsync(UUID beerId, final ApiCallback<Beer> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BeersBeerIdGetValidateBeforeCall(beerId, _callback);
        Type localVarReturnType = new TypeToken<Beer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BeersBeerIdPut
     * @param beerId Retrieve beer given beer id (required)
     * @param beer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beer Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BeersBeerIdPutCall(UUID beerId, Beer beer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beer;

        // create path and map variables
        String localVarPath = "/v2/beers/{beerId}"
            .replaceAll("\\{" + "beerId" + "\\}", localVarApiClient.escapeString(beerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JwtAuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BeersBeerIdPutValidateBeforeCall(UUID beerId, Beer beer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beerId' is set
        if (beerId == null) {
            throw new ApiException("Missing the required parameter 'beerId' when calling v2BeersBeerIdPut(Async)");
        }
        
        // verify the required parameter 'beer' is set
        if (beer == null) {
            throw new ApiException("Missing the required parameter 'beer' when calling v2BeersBeerIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = v2BeersBeerIdPutCall(beerId, beer, _callback);
        return localVarCall;

    }

    /**
     * Update the beer
     * Updating the beer
     * @param beerId Retrieve beer given beer id (required)
     * @param beer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beer Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void v2BeersBeerIdPut(UUID beerId, Beer beer) throws ApiException {
        v2BeersBeerIdPutWithHttpInfo(beerId, beer);
    }

    /**
     * Update the beer
     * Updating the beer
     * @param beerId Retrieve beer given beer id (required)
     * @param beer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beer Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2BeersBeerIdPutWithHttpInfo(UUID beerId, Beer beer) throws ApiException {
        okhttp3.Call localVarCall = v2BeersBeerIdPutValidateBeforeCall(beerId, beer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the beer (asynchronously)
     * Updating the beer
     * @param beerId Retrieve beer given beer id (required)
     * @param beer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Beer Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BeersBeerIdPutAsync(UUID beerId, Beer beer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BeersBeerIdPutValidateBeforeCall(beerId, beer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3CreateBeerPost
     * @param beer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer Created </td><td>  * location - Location of created beer object <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CreateBeerPostCall(Beer beer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beer;

        // create path and map variables
        String localVarPath = "/v3/createBeer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JwtAuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3CreateBeerPostValidateBeforeCall(Beer beer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beer' is set
        if (beer == null) {
            throw new ApiException("Missing the required parameter 'beer' when calling v3CreateBeerPost(Async)");
        }
        

        okhttp3.Call localVarCall = v3CreateBeerPostCall(beer, _callback);
        return localVarCall;

    }

    /**
     * It&#39;s time to introduce a new beer
     * Create a new tasty Beer
     * @param beer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer Created </td><td>  * location - Location of created beer object <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void v3CreateBeerPost(Beer beer) throws ApiException {
        v3CreateBeerPostWithHttpInfo(beer);
    }

    /**
     * It&#39;s time to introduce a new beer
     * Create a new tasty Beer
     * @param beer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer Created </td><td>  * location - Location of created beer object <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3CreateBeerPostWithHttpInfo(Beer beer) throws ApiException {
        okhttp3.Call localVarCall = v3CreateBeerPostValidateBeforeCall(beer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * It&#39;s time to introduce a new beer (asynchronously)
     * Create a new tasty Beer
     * @param beer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer Created </td><td>  * location - Location of created beer object <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3CreateBeerPostAsync(Beer beer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3CreateBeerPostValidateBeforeCall(beer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
